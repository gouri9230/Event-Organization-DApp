{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-0882a17036e033547a22e67891cacae097da2876",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/EventOrganizer.sol": "project/contracts/EventOrganizer.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/EventOrganizer.sol": {
        "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n// Organizer creates an Event and give out tickets. Anyone can buy tickets to the event.\ncontract EventOrganizer {\n\n    struct Event {\n        string eventName;\n        address organiser;\n        uint256 totalTickets;\n        uint256 ticketsRemaining;\n        uint256 price;\n        uint256 date;\n    }\n\n    mapping(uint256 => Event) public events;\n    uint256 eventId;\n    // to store the tickets an address has for a particular event\n    mapping(address => mapping(uint256 => uint256)) public tickets;\n\n    function createEvent(string memory _eventName, uint256 _price, uint256 _totalTickets, uint256 _date) public {\n        // date should be after the time of event creation. if event is created on 10th june, then date of event should be after this date.\n        require(block.timestamp < _date, \"The event cannot be in the past\");\n        require(_totalTickets > 0, \"event should have atleast 1 ticket\");\n        require(_price > 0, \"ticket price should be more than 0\");\n        events[eventId] = Event(_eventName, msg.sender, _totalTickets, _totalTickets, _price, _date);\n        eventId++;\n    }\n\n    function buyTickets(uint256 _eventId, uint256 _quantity) public payable {\n        require(_quantity > 0, \"you need to buy atleast 1 ticket\");\n        require(msg.value >= (events[_eventId].price * _quantity), \"pay full amount for the number of tickets you want to buy\");\n        require(events[_eventId].date > block.timestamp, \"event has already passed.\");\n        require(events[_eventId].totalTickets >= _quantity, \"not enough tickets left\");\n        tickets[msg.sender][_eventId] = _quantity;\n        events[_eventId].ticketsRemaining -= _quantity;\n    }\n}"
      }
    }
  }
}